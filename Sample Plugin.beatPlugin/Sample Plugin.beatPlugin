/*

Sample Beat Plugin

This plugin doesn't really do anything, just demonstrates some plugin features.
It should act as a starting-point to begin writing your own extensions for Beat.

*/

// Open development console
Beat.openConsole()
Beat.log("This is a console message from the Sample Plugin.")

let confirm = Beat.confirm("This is a sample plugin", "Do you want to continue running it?")

// User hit Cancel
if (!confirm) {
	Beat.log("User pressed Cancel")
	Beat.alert("Sad to see you go", "Plugin will now terminate")
	return
} else {
	Beat.log("User pressed OK")
}


// ########################################
// USER INPUT
// ########################################

let value, stringValue;

value = Beat.dropdownPrompt(
	"Select a value", // Title
	"This is a drop-down menu with selectable items", // Info text
	["First Item", "Second Item", "Third Item"]
)
if (value == null) return

stringValue = Beat.prompt(
	"Enter a string value", // Title
	"Type anything" // Info text
)
if (stringValue == null) return


// ########################################
// INTERACTING WITH THE DOCUMENT
// ########################################

// Add some text in the beginning of the document (position 0, length 0)
Beat.replaceRange(0, 0, "INT. SAMPLE SCENE\n\nThis is a sample script.\n\n")

// Get screenplay content
const lines = Beat.lines()
const scenes = Beat.scenes()

// Scroll to scene (ie. select the range)
Beat.scrollToScene(scenes[0])

// Go through the lines
for (const line of lines) {
	let content = line.string
	let position = line.position
	let type = line.typeAsString()

	// Do something with this data
	Beat.log("Line type: " + type + " / Location: " + position)
}

for (const scene of scenes) {
	let start = scene.sceneStart
	let length = scene.sceneLength

	let lines = Beat.linesForScene(scene)

	// Do something
	Beat.log("Scene heading: " + scene.string)
}

// ########################################
// MORE UI STUFF
// ########################################

let html = 
	"<h1>Hello World</h1>\
	<h2>User Input</h2>\
	<p>Dropdown value: " + value + "<br>\
	String value: " + stringValue + "</p> \
	<p>Input something:<br>\
	<input name='input' rel='beat' type='text'></input></p>"

// Inject some script. Beat.data is an object you can pass onto callback function
html += "<script>Beat.data = { hello: 'World' }</script>"

Beat.htmlPanel(html, 400, 300,
	function (data) {
		Beat.log("here?")
		// The data can be passed here
		Beat.alert("Data from HTML panel:", JSON.stringify(data));
		openFile()
	}
);

function openFile() {
	Beat.openFile(["fountain"], // Allowed file extensions
		function (path) { // Callback
			if (!path) return

			let content = Beat.fileToString(path)
			
			// Do something with the string. 
			// In this sample we create a new document with the file contents.
			// NOTE NOTE NOTE: Never call newDocument while a modal is displayed.
			Beat.newDocument(content)
			
			// Remember to terminate plugins using asynchronous calls (such as this) 
			// using Beat.end(). Otherwise you might end up draining the user's memory.
			Beat.end()
		}
	)
}


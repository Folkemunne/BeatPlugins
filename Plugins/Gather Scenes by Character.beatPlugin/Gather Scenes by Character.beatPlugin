/*

Gather scenes by character
Copyright: Lauri-Matti Parppei
Description: Creates a new document with only the scenes which include selected character
Version: 1.0

*/

let characters = [];
let scenes = [];

// Supplementary functions
function stripSuffix(line) {
	return line.replace(/\(.*\)/gm, '');
}
function titleCase(str) {
   var splitStr = str.toLowerCase().split(' ');
   for (var i = 0; i < splitStr.length; i++) {
       splitStr[i] = splitStr[i].charAt(0).toUpperCase() + splitStr[i].substring(1);     
   }
   return splitStr.join(' '); 
}

// Gather characters (by dialogue)
for (const line of Beat.lines()) {
	if (line.typeAsString() == "Character") {
		const character = line.string.toUpperCase();
		if (!characters.includes(character)) characters.push(character);
	}
}

if (!characters.length) {
	Beat.alert("No Characters Found", "This plugin uses dialogue blocks to identify character names. Add some dialogue to continue.");
	return;
}

characters.sort();

// Beat.menu({ characterName: { type: 'dropdown', value: characters }, dialogueOnly: { type: 'checkbox', 'Dialogue only', default: true }});
const characterName = Beat.dropdownPrompt("Gather Scenes by Character", "Select a character to create a new document:", characters);
if (characterName == "" || characterName == null) return;

// Iterate through the scenes
for (const scene of Beat.scenes()) {
	const lines = Beat.linesForScene(scene);
	
	for (const line of lines) {
		const type = line.typeAsString();

		// Immediately add this scene if it contains dialogue with the person
		if ((type == "Character" || type == "Double Dialogue Character")) {
			// Strip V.O. etc.
			const charLine = stripSuffix(line.string).trim();
			
			if (charLine == characterName) {
				scenes.push(scene);
				break;
			}
		}

		// Try to determine if we have the person somewhere in action
		if (type == "Action") {
			const string = " " + line.string;
			const nameInAction = titleCase(characterName);

			if (string.indexOf(characterName) > 0 || 
				string.indexOf(" " + nameInAction + " ") > 0) {
				scenes.push(scene);
				break;
			}
		}

	}
}

// Iterate through scenes to get their content
const screenplay = Beat.getText();
let result = "";

for (const scene of scenes) {
	const sceneText = screenplay.substring(scene.sceneStart, scene.sceneStart + scene.sceneLength) + "\n\n";
	result += sceneText;
}

if (result.length == 0)  Beat.alert("No Scenes Found", "Something went wrong.");
else Beat.newDocument(result);